{"version":3,"sources":["mainScript.js"],"names":["window","addEventListener","btn","document","querySelector","result","btn2","loadFile","url","Promise","res","rej","xhr","XMLHttpRequest","open","send","status","response","innerHTML","then","value","catch","console","error","request","onreadystatechange","log","readyState"],"mappings":"AAAA,aAEAA,OAAAC,iBAAA,OAAA,WAEA,IAAAC,EAAAC,SAAAC,cAAA,SACAC,EAAAF,SAAAC,cAAA,WACAE,EAAAH,SAAAC,cAAA,UAiCA,SAAAG,EAAAC,GACA,OAAA,IAAAC,QAAA,SAAAC,EAAAC,GAEA,IAAAC,EAAA,IAAAC,eAEAD,EAAAE,KAAA,MAAAN,GACAI,EAAAG,OAEAH,EAAAX,iBAAA,OAAA,WAEA,KAAAW,EAAAI,OACAL,EAAAC,EAAAI,QAGAN,EAAAE,EAAAK,YAIAL,EAAAX,iBAAA,QAAA,WACAU,EAAAC,EAAAI,YAhDAd,EAAAD,iBAAA,QAAA,WAKA,IAAAW,EAAA,IAAAC,eAMAD,EAAAE,KAAA,MAAA,YACAF,EAAAG,OAIAH,EAAAX,iBAAA,OAAA,WAEA,KAAAW,EAAAI,OACAX,EAAAa,UAAA,sCAGAb,EAAAa,UAAAN,EAAAK,aA+BAX,EAAAL,iBAAA,QAAA,WAEAM,EAAA,YAAAY,KAAA,SAAAC,GAGA,OADAf,EAAAa,UAAAE,EACAb,EAAA,eAGAY,KAAA,SAAAC,GAEAf,EAAAa,WAAAE,IAGAC,MAAA,SAAAL,GAEAM,QAAAC,MAAA,aAAAP,SAUAhB,OAAAC,iBAAA,OAAA,WAEAE,SAAAC,cAAA,WAEAH,iBAAA,QAEA,WAGA,IAAAuB,EAAA,IAAAX,eAGAW,EAAAC,mBAAA,WAMAH,QAAAI,IAAAF,EAAAG,YAYAH,EAAAV,KAAA,MAAA,cACAU,EAAAT","file":"scripts.min.js","sourcesContent":["'use strict';\r\n// ajax # 00\r\nwindow.addEventListener('load', function () {\r\n\r\n    let btn = document.querySelector('#send'),\r\n        result = document.querySelector('#result'),\r\n        btn2 = document.querySelector('#sends');\r\n\r\n\r\n    // без promise\r\n    btn.addEventListener('click', () => {\r\n        /*\r\n            Данный API предоставляет простой способ получения данных по ссылке без перезагрузки страницы.\r\n            Это позволяет обновлять только часть веб-страницы не прерывая пользователя.\r\n         */\r\n        let xhr = new XMLHttpRequest();\r\n        /*\r\n            метод open() готовит соединение.\r\n            1й параметр - метод, которым отправляем запрос,\r\n            2й параметр - url, куда отправляем запрос.\r\n        */\r\n        xhr.open('GET', 'text.txt');\r\n        xhr.send();\r\n        /*\r\n            вывод содержимого файла на страницу\r\n        */\r\n        xhr.addEventListener('load', ()=> {\r\n            /*проверка на ошибки*/\r\n            if (xhr.status >= 400){\r\n                result.innerHTML = 'Сервер не дает ответ на Ваш запрос.';\r\n            }\r\n            else {\r\n                result.innerHTML = xhr.response;\r\n            }\r\n        });\r\n\r\n    });\r\n\r\n    // promise\r\n    function loadFile(url) {\r\n        return new Promise(function (res, rej) {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            xhr.open('GET', url);\r\n            xhr.send();\r\n\r\n            xhr.addEventListener('load', () => {\r\n\r\n                if(xhr.status >= 400){\r\n                    rej(xhr.status);\r\n                }\r\n                else{\r\n                    res(xhr.response);\r\n                }\r\n\r\n            });\r\n            xhr.addEventListener('error', () => {\r\n                rej(xhr.status);\r\n            })\r\n        })\r\n    } // loadFile\r\n\r\n    btn2.addEventListener('click', () => {\r\n\r\n        loadFile('text.txt').then( function (value) {\r\n\r\n            result.innerHTML = value;\r\n            return loadFile('text2.txt');\r\n\r\n        })\r\n            .then(function ( value) {\r\n\r\n                result.innerHTML += value;\r\n\r\n            })\r\n            .catch(function (status) {\r\n\r\n                console.error('код ответа', status);\r\n\r\n            });\r\n\r\n    }); // click\r\n\r\n});\r\n\r\n// ajax #0\r\n// отправка ajax запроса методом GET\r\nwindow.addEventListener('load', function () {\r\n\r\n    let shopIP  = document.querySelector('#shopIp');\r\n\r\n    shopIP.addEventListener('click', ajaxGet);\r\n\r\n    function ajaxGet() {\r\n        // создаем переменную, в которую попадает экземпляр класса,\r\n        // отвечающий за отправку фонового запроса на сервер\r\n        let request = new XMLHttpRequest();\r\n\r\n        // статус готовности запроса. Проверку до отправки делаем.\r\n        request.onreadystatechange = function () {\r\n            // request.readyState  = 0 - new\r\n            // request.readyState  = 1 - open\r\n            // request.readyState  = 2 - send\r\n            // request.readyState  = 3 - ответ пришел частично\r\n            // request.readyState  = 4 - ответ пришел полностью\r\n            console.log(request.readyState);\r\n            // request.status == 200 - ответ от сервера корректный\r\n/*\r\n            if (request.readyState == 4 && request.status == 200) {\r\n                // .responseText - текст, полученный в ответ от сервера.\r\n                // Выводим в блок на странице.\r\n                document.querySelector('#myIp').innerHTML = request.responseText;\r\n            }\r\n*/\r\n            // метод open() отвечает за соединение с сервером.\r\n            // Первый параметр - GET (метод, которым обращаемся на сервер),\r\n            // второй параметр - URL.\r\n            request.open('GET', 'ajax-0.php');\r\n            request.send();\r\n        };\r\n    } // ajaxGet\r\n}); // load"]}